"use client"
import { useState, useEffect } from "react"
import type React from "react"
import Link from "next/link"
import { useLanguage } from "@/lib/language-context"
import { createBrowserClient } from "@supabase/ssr"

interface Message {
  id: number
  author: string
  isAI: boolean
  time: string
  message: string
  user_id?: string
  created_at?: string
}

const generateSimpleAIResponse = (userMessage: string): string => {
  const message = userMessage.toLowerCase()

  if (message.includes("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ") || message.includes("‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ")) {
    return "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏∞?"
  }

  if (message.includes("‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û") || message.includes("‡∏õ‡πà‡∏ß‡∏¢") || message.includes("‡πÄ‡∏à‡πá‡∏ö")) {
    return "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏ß‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏µ ‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏£‡πÑ‡∏õ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏Ñ‡πà‡∏∞"
  }

  if (message.includes("‡πÄ‡∏´‡∏á‡∏≤") || message.includes("‡πÄ‡∏®‡∏£‡πâ‡∏≤") || message.includes("‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î")) {
    return "‡∏â‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏á‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô ‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á ‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡πà‡∏∞"
  }

  if (message.includes("‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß") || message.includes("‡∏•‡∏π‡∏Å") || message.includes("‡∏´‡∏•‡∏≤‡∏ô")) {
    return "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡πà‡∏ß‡∏á‡πÉ‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏î‡∏µ‡πÜ ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?"
  }

  if (message.includes("‡∏á‡∏≤‡∏ô") || message.includes("‡∏ó‡∏≥‡∏á‡∏≤‡∏ô") || message.includes("‡∏≠‡∏≤‡∏ä‡∏µ‡∏û")) {
    return "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏™‡∏≤ ‡∏á‡∏≤‡∏ô‡∏ù‡∏µ‡∏°‡∏∑‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ä‡∏∏‡∏°‡∏ä‡∏ô ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡πâ‡∏ß‡∏ô‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡πà‡∏∞"
  }

  if (message.includes("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì") || message.includes("‡∏Ç‡∏≠‡∏ö‡πÉ‡∏à")) {
    return "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡∏î‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞"
  }

  // Default responses
  const defaultResponses = [
    "‡∏â‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?",
    "‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∞?",
    "‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?",
    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞",
    "‡∏â‡∏±‡∏ô‡∏î‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?",
  ]

  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)]
}

export default function AIChatPage() {
  const { t } = useLanguage()
  const [messages, setMessages] = useState<Message[]>([])
  const [newMessage, setNewMessage] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [supabase] = useState(() =>
    createBrowserClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!),
  )

  useEffect(() => {
    const initialMessages: Message[] = [
      {
        id: 1,
        author: t("community.aiChat.aiName"),
        isAI: true,
        time: "08:00",
        message: t("community.aiChat.initialMessage"),
      },
    ]
    setMessages(initialMessages)
  }, [t])

  useEffect(() => {
    loadConversationHistory()
  }, [])

  const loadConversationHistory = async () => {
    try {
      const {
        data: { user },
      } = await supabase.auth.getUser()
      if (user) {
        const { data: chatHistory } = await supabase
          .from("ai_chat_messages")
          .select("*")
          .eq("user_id", user.id)
          .order("created_at", { ascending: true })
          .limit(50)

        if (chatHistory && chatHistory.length > 0) {
          const formattedMessages = chatHistory.map((msg: any, index: number) => ({
            id: index + 2, // Start from 2 since initial message is id 1
            author: msg.is_ai ? t("community.aiChat.aiName") : t("community.aiChat.you"),
            isAI: msg.is_ai,
            time: new Date(msg.created_at).toLocaleTimeString("th-TH", { hour: "2-digit", minute: "2-digit" }),
            message: msg.message,
            user_id: msg.user_id,
            created_at: msg.created_at,
          }))
          setMessages((prev) => [...prev, ...formattedMessages])
        }
      }
    } catch (error) {
      console.log("[v0] Could not load chat history:", error)
    }
  }

  const saveMessageToDatabase = async (message: string, isAI: boolean) => {
    try {
      const {
        data: { user },
      } = await supabase.auth.getUser()
      if (user) {
        await supabase.from("ai_chat_messages").insert({
          user_id: user.id,
          message: message,
          is_ai: isAI,
          created_at: new Date().toISOString(),
        })
      }
    } catch (error) {
      console.log("[v0] Could not save message:", error)
    }
  }

  const handleSendMessage = async () => {
    if (newMessage.trim()) {
      const userMessage: Message = {
        id: messages.length + 1,
        author: t("community.aiChat.you"),
        isAI: false,
        time: new Date().toLocaleTimeString("th-TH", { hour: "2-digit", minute: "2-digit" }),
        message: newMessage,
      }

      setMessages((prev) => [...prev, userMessage])
      setIsLoading(true)

      const currentMessage = newMessage
      setNewMessage("")

      await saveMessageToDatabase(currentMessage, false)

      setTimeout(async () => {
        const aiResponseText = generateSimpleAIResponse(currentMessage)

        const aiResponse: Message = {
          id: messages.length + 2,
          author: t("community.aiChat.aiName"),
          isAI: true,
          time: new Date().toLocaleTimeString("th-TH", { hour: "2-digit", minute: "2-digit" }),
          message: aiResponseText,
        }

        setMessages((prev) => [...prev, aiResponse])
        await saveMessageToDatabase(aiResponseText, true)
        setIsLoading(false)
      }, 1000) // Simulate thinking time
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleSendMessage()
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-pink-100 flex flex-col">
      {/* Header */}
      <div className="bg-white shadow-lg border-b border-orange-200">
        <div className="max-w-md mx-auto p-6">
          <div className="flex items-center gap-4">
            <Link href="/community">
              <button className="p-2 hover:bg-slate-100 rounded-lg">
                <span className="text-xl">‚Üê</span>
              </button>
            </Link>
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center">
                <span className="text-2xl">üíñ</span>
              </div>
              <div>
                <h1 className="text-2xl font-bold text-slate-900">{t("community.aiChat.title")}</h1>
                <p className="text-sm text-orange-600">{t("community.aiChat.subtitle")}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Hero Section */}
      <div className="max-w-md mx-auto p-6">
        <div className="p-6 mb-6 bg-gradient-to-r from-orange-50 to-pink-50 border border-orange-200 rounded-lg">
          <div className="text-center">
            <div className="w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-4xl">üíñ</span>
            </div>
            <p className="text-lg text-slate-700 leading-relaxed">{t("community.aiChat.heroText")}</p>
          </div>
        </div>
      </div>

      {/* Chat Messages */}
      <div className="flex-1 max-w-md mx-auto w-full px-6 overflow-y-auto">
        <div className="space-y-4 pb-6">
          {messages.map((message) => (
            <div key={message.id} className={`flex gap-3 ${message.isAI ? "" : "flex-row-reverse"}`}>
              <div className="w-10 h-10 bg-slate-100 rounded-full flex items-center justify-center text-lg flex-shrink-0">
                {message.isAI ? <span className="text-xl">üíñ</span> : <span className="text-xl">üë§</span>}
              </div>
              <div className={`flex-1 max-w-xs ${message.isAI ? "" : "text-right"}`}>
                <div className="flex items-center gap-2 mb-1">
                  <span className="text-sm font-medium text-slate-700">{message.author}</span>
                  <span className="text-xs text-slate-500">{message.time}</span>
                </div>
                <div
                  className={`p-4 rounded-lg ${message.isAI ? "bg-orange-100 text-orange-900" : "bg-pink-500 text-white"}`}
                >
                  <p className="text-base leading-relaxed">{message.message}</p>
                </div>
              </div>
            </div>
          ))}

          {isLoading && (
            <div className="flex gap-3">
              <div className="w-10 h-10 bg-slate-100 rounded-full flex items-center justify-center">
                <span className="text-xl">üíñ</span>
              </div>
              <div className="flex-1 max-w-xs">
                <div className="flex items-center gap-2 mb-1">
                  <span className="text-sm font-medium text-slate-700">{t("community.aiChat.aiName")}</span>
                </div>
                <div className="p-4 bg-orange-100 rounded-lg">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-orange-500 rounded-full animate-bounce"></div>
                    <div
                      className="w-2 h-2 bg-orange-500 rounded-full animate-bounce"
                      style={{ animationDelay: "0.1s" }}
                    ></div>
                    <div
                      className="w-2 h-2 bg-orange-500 rounded-full animate-bounce"
                      style={{ animationDelay: "0.2s" }}
                    ></div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Message Input */}
      <div className="bg-white border-t border-orange-200 p-6">
        <div className="max-w-md mx-auto">
          <div className="flex gap-3">
            <input
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={t("community.aiChat.messagePlaceholder")}
              className="flex-1 text-lg py-3 px-4 rounded-xl border-2 border-slate-300 focus:border-orange-500 focus:outline-none"
              disabled={isLoading}
            />
            <button
              onClick={handleSendMessage}
              className="bg-orange-500 hover:bg-orange-600 px-6 py-3 rounded-xl text-white disabled:opacity-50"
              disabled={!newMessage.trim() || isLoading}
            >
              <span className="text-lg">üì§</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}
